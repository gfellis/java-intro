/**
* This program takes a user input in a text field and outputs the individual
* digits of the input and calculates the total sum of the numbers
*
* @author	Gregory S. Fellis
* @version	1.0
* @since	2016-07-04
*/

//package mainFrame;

public class GSF_04_number_processor extends javax.swing.JFrame {
    // Variables
    // input    
    String inputString = "";    // String used for the user input
    int inputInt;   // Integer used to capture user input
    
    // output
    String outputString = "";   // String used to output variables with spaces
    int outputInt;  // Integer used to calculate output
    
    /**
     * Creates new form GFellis_IT145_week_4
     */
    public GSF_04_number_processor() {       
        initComponents();
        
        // Blank out the statusLabel to start
        statusLabel.setText("");        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textLabel1 = new javax.swing.JLabel();
        inputText = new javax.swing.JTextField();
        textLabel2 = new javax.swing.JLabel();
        seperator1 = new javax.swing.JSeparator();
        outputLabel1 = new javax.swing.JLabel();
        textLabel3 = new javax.swing.JLabel();
        outputLabel2 = new javax.swing.JLabel();
        separator2 = new javax.swing.JSeparator();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Number Processor");
        setResizable(false);

        textLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textLabel1.setText("Enter an integer in the field below:");

        inputText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputText.setText("0");
        inputText.setToolTipText("Entry must be between +- 2,147,483,647.");
        inputText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputTextFocusGained(evt);
            }
        });
        inputText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputTextKeyReleased(evt);
            }
        });

        textLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textLabel2.setText("The numbers you entered are:");

        outputLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        outputLabel1.setText("0");

        textLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textLabel3.setText("The total sum of the numbers are:");

        outputLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        outputLabel2.setText("0");

        statusLabel.setText("statusText");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(textLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(inputText)
                        .addComponent(seperator1)
                        .addComponent(textLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {inputText, outputLabel1, separator2, seperator1, textLabel1, textLabel2, textLabel3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextKeyReleased
        // Whenever a new key is entered, this block is executed

        // Blank out the statusLabel until an error is detected
        statusLabel.setText("");     
        
        // Try/Catch block to detect invalid formats
        try {            
            // parse the textbox for a valid INT and typecase
            inputInt = Integer.parseInt(inputText.getText());
            
            // If the input number is negative, flip it to positive.
            if (inputInt < 0) { 
                inputInt *= -1;
            }
            
            // Typecast the input to a string for use in the for loops
            inputString = Integer.toString(inputInt);
            
            // set outputInt to 0 for calculations in for loops
            outputInt = 0;

            // Loop through the entire inputString.
            for (int i = 0; i < inputString.length(); i++) {
                
                /* If it's the first time through the loop,
                * start a new outputString, otherwise concatenate
                */
                if (i == 0) {
                    outputString = Character.toString(inputString.charAt(i)) + " ";
                } else {
                    outputString += Character.toString(inputString.charAt(i)) + " ";
                }

                /* Each time through the loop, add outputInt to itself plus
                * current character in the inputString
                */
                outputInt += Integer.parseInt(Character.toString(inputString.charAt(i)));
            }

            // Set the label text according to calculations from the loop
            outputLabel1.setText(outputString);
            outputLabel2.setText(Integer.toString(outputInt));
        } catch (NumberFormatException exception) {
            /* If an invalid number was detected in the text field
             * change the statusText to reflect the error
            */            
            statusLabel.setText("Invalid entry detected.");
        }
    }//GEN-LAST:event_inputTextKeyReleased

    private void inputTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTextFocusGained
        // Select all text when textbox is targeted
        inputText.selectAll();
    }//GEN-LAST:event_inputTextFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GSF_04_number_processor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GSF_04_number_processor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GSF_04_number_processor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GSF_04_number_processor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GSF_04_number_processor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputText;
    private javax.swing.JLabel outputLabel1;
    private javax.swing.JLabel outputLabel2;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator seperator1;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel textLabel1;
    private javax.swing.JLabel textLabel2;
    private javax.swing.JLabel textLabel3;
    // End of variables declaration//GEN-END:variables
}
